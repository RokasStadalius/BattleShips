@page "/room/{roomId}"
@inject Blazored.Toast.Services.IToastService ToastService
@inject RoomService RoomService
@inject UserState UserState
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@using BattleShips.Models;
@using BattleShips.Components;
@using BattleShips.Services;
@using Microsoft.AspNetCore.SignalR.Client;

@code {
    [Parameter] public string RoomId { get; set; }
    private HubConnection? hubConnection;
    private Room currentRoom;

    private Field field; // For ships building

    protected override async Task OnInitializedAsync()
    {
        currentRoom = RoomService.GetRoomById(RoomId);

        if (currentRoom == null)
        {
            ToastService.ShowError("Room not found!");
            return;
        }

        field = new Field("Field_" + currentRoom.RoomName, 10, 10);

        if (currentRoom.CurrentPlayerCount == currentRoom.MaxPlayerCount)
        {
            ToastService.ShowSuccess("All Players are here!");
        }
        else
        {
            ToastService.ShowError("Waiting for players");
        }

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/roomhub"))
            .Build();

        await hubConnection.StartAsync();

        hubConnection.On("GameStarted", () =>
        {
            currentRoom.IsGameStarted = true;
            StateHasChanged(); // Refresh the UI
        });
    }

    private async Task ReadyClicked()
    {
        field.IsReadyToPlay = true;
        await hubConnection.InvokeAsync("SetPlayerReady", currentRoom.RoomId, UserState.CurrentUser.UserId);
    }
}

<h2>@UserState.CurrentUser?.UserName</h2>
<h3>Welcome to Room @currentRoom?.RoomName</h3>

@if (currentRoom == null)
{
    // Handle room not found case
}
else
{
    @if (currentRoom.IsGameStarted)
    {
        <div style="display: flex; justify-content:space-around">
            <div>
                <FieldComponent FieldModel="@field" />
            </div>
            <div>
                <FieldComponent FieldModel="@field" />
            </div>
        </div>
    }
    else
    {
        <div style="display: flex; justify-content:space-around">
            <div>
                <FieldBuildingComponent FieldModel="@field" />
            </div>
        </div>
        <div>
            @if (!field.IsReadyToPlay)
            {
                <button type="button" class="btn btn-primary" @onclick="@(() => ReadyClicked())">Ready!</button>
            }
            else
            {
                <h2>Waiting for others!</h2>
            }
        </div>
    }
}
