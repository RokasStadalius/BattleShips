@page "/room/{roomId}"
@inject Blazored.Toast.Services.IToastService ToastService
@inject RoomService RoomService
@inject UserState UserState
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@using BattleShips.Models;
@using BattleShips.Components;
@using BattleShips.Services;
@using Microsoft.AspNetCore.SignalR.Client;

@code {
    [Parameter] public string RoomId { get; set; }
    private HubConnection? hubConnection;
    private Room currentRoom;
    private Field field; // For ships building

    private Field fieldA; // For ships building
    private Field fieldB; // For ships building

    protected override async Task OnInitializedAsync()
    {
        currentRoom = RoomService.GetRoomById(RoomId);

        if (currentRoom == null)
        {
            ToastService.ShowError("Room not found!");
            return;
        }

        field = new Field("Field_" + currentRoom.RoomName, 10, 10);
        currentRoom.UserFields.Add(new Tuple<Field, User,bool>(field, UserState.CurrentUser,false));
        RoomService.RefreshRoomList();
        if (currentRoom.CurrentPlayerCount == currentRoom.MaxPlayerCount)
        {
            ToastService.ShowSuccess("All Players are here!");
        }
        else
        {
            ToastService.ShowError("Waiting for players");
        }

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/roomhub"))
            .Build();

        await hubConnection.StartAsync();

        hubConnection.On("GameStarted", () =>
        {
            fieldA = field;
            fieldB = currentRoom.UserFields.Where(n => n.Item2.UserId != UserState.CurrentUser.UserId).FirstOrDefault().Item1;
            currentRoom.CurrentUserTurnID = currentRoom.UserFields.Where(n => n.Item2.UserId == UserState.CurrentUser.UserId).FirstOrDefault().Item2.UserId;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On("ChangeTurn", () =>
        {
            currentRoom.ChangeTurn();
            Console.WriteLine($"Naudotojo pasikeitimas {UserState.CurrentUser.UserName}: {currentRoom.CurrentUserTurnID}");
            if (IsItYourTurn())
            {
                ToastService.ShowSuccess("Tavo ejimas!");
            }
            InvokeAsync(StateHasChanged);
        });
    }

    private void ReadyClicked()
    {
        field.IsReadyToPlay = true;
        currentRoom.SetPlayerReady(UserState.CurrentUser.UserId);
        if (currentRoom.IsGameStarted)
            RoomService.StartRoomGame(currentRoom);

    }

    private bool IsItYourTurn()
    {
        return UserState.CurrentUser.UserId == currentRoom.CurrentUserTurnID;
    }
}

<h2>@UserState.CurrentUser?.UserName</h2>
<h3>Welcome to Room @currentRoom?.RoomName</h3>

@if (currentRoom == null)
{
    // Handle room not found case
}
else
{
    @if (currentRoom.IsGameStarted)
    {
        <div style="display: flex; justify-content:center"> 
            <div>
                @if(@fieldA != null)
                {
                    <FieldComponent FieldModel="@fieldA" ShowFieldShips="true" Enabled="!IsItYourTurn()" />

                }
                
            </div>
            <div>
                @if (fieldB != null)
                {
                    <FieldComponent FieldModel="@fieldB" ShowFieldShips="false" Enabled="!IsItYourTurn()"/>
                }
            </div>
        </div>
    }
    else
    {
        <div style="display: flex; justify-content:center">
            <div>
                <FieldBuildingComponent FieldModel="@field" />
            </div>
        </div>
        <div>
            @if (!field.IsReadyToPlay)
            {
                <button type="button" class="btn btn-primary" @onclick="@(() => ReadyClicked())">Ready!</button>
            }
            else
            {
                <h2>Waiting for others!</h2>
            }
        </div>
    }
}
