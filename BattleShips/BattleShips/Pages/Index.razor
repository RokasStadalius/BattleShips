@page "/"
@implements IAsyncDisposable;

@inject Blazored.Toast.Services.IToastService ToastService;
@inject RoomService RoomService;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JSRuntime;
@inject UserState UserState;

@using BattleShips.Models;
@using BattleShips.Components;
@using BattleShips.Pages;
@using BattleShips.Services;
@using Microsoft.AspNetCore.SignalR.Client;

@code {
    private List<Room> rooms = new List<Room>();
    private HubConnection? hubConnection;

    private string playerName;
    private User currentUser;
    private bool isUserJoined = false;

}

<PageTitle>Index</PageTitle>

@if (!isUserJoined)
{
    <h3>Enter your name to join a room:</h3>
    <input @bind="playerName" placeholder="Enter your name" />
    <button @onclick="() => SetUser(playerName)" class="btn btn-primary">Set Name</button>
}
else
{
    <h1>Welcome, @currentUser.UserName</h1>
    <div>
        <button type="button" class="btn btn-primary" @onclick="@(() => CreateRoomStandart())">Create Standart Room</button>
        <button type="button" class="btn btn-primary" @onclick="@(() => CreateRoomMedium())">Create Medium Room</button>
        <button type="button" class="btn btn-primary" @onclick="@(() => CreateRoomAdvanced())">Create Advanced Room</button>
        <button type="button" class="btn btn-secondary" @onclick="@(() => OpenNewTab())">New user</button>
    </div>

    @if (rooms is not null)
    {
        <h3>Available Rooms</h3>
        <table class="table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Name</th>
                    <th>MAX/CUR</th>
                    <th>State</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var room in rooms)
                {
                    <tr>
                        <td>@room.DateCreated.ToShortDateString()</td>
                        <td>@room.RoomName</td>
                        <td>
                            @if (room.MaxPlayerCount > room.CurrentPlayerCount)
                            {
                                <span style="color: green">
                                    @room.CurrentPlayerCount / @room.MaxPlayerCount
                                </span>
                            }
                            else
                            {
                                <span style="color: red">
                                    @room.CurrentPlayerCount / @room.MaxPlayerCount
                                </span>
                            }
                        </td>
                        <td>
                            <span class="badge @(room.GetBadgeClass())">
                                @room.GetStateName()
                            </span>
                        </td>
                        <td>
                            @if (room.MaxPlayerCount > room.CurrentPlayerCount)
                            {
                                <button type="button" class="btn btn-primary" @onclick="@(() => JoinRoom(room))">Join Room</button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <hr />
    }
}

@code {
    protected override async Task OnInitializedAsync()
    {
        if (UserState.CurrentUser != null)
        {
            currentUser = UserState.CurrentUser;
            isUserJoined = true;
        }
        await LoadRoomList();

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/roomHub"))
            .Build();

        hubConnection.On("ReceiveRoomUpdate", async () =>
        {
            await LoadRoomList();
            InvokeAsync(StateHasChanged);
        });

        try
        {
            await hubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"SignalR connection error: {ex.Message}");
        }
    }

    private async Task LoadRoomList()
    {
        rooms = RoomService?.GetAllRooms()?.ToList() ?? new List<Room>();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private void JoinRoom(Room room)
    {
        if (!room.IsGameStarted && !room.IsFull)
            NavigationManager.NavigateTo($"/room/{room.RoomId}");
        else
            ToastService.ShowError("Room is full!");
    }

    private void SetUser(string name)
    {
        if (!string.IsNullOrWhiteSpace(name))
        {
            currentUser = new User(name);
            isUserJoined = true;
            UserState.SetUser(new User(playerName));
        }
        else
        {
            ToastService.ShowError("Name cannot be empty!");
        }
    }

    private async Task CreateRoomStandart()
    {
        RoomService.CreateRoomStandart("Standart_Room_" + UserState.CurrentUser.UserName);
        await LoadRoomList();
    }

    private async Task CreateRoomMedium()
    {
        RoomService.CreateRoomMedium("Medium_Room_" + UserState.CurrentUser.UserName);
        await LoadRoomList();
    }

    private async Task CreateRoomAdvanced()
    {
        RoomService.CreateRoomAdvanced("Advanced_Room_" + UserState.CurrentUser.UserName);
        await LoadRoomList();
    }

    private void OpenNewTab()
    {
        var url = NavigationManager.Uri;
        var script = $"openNewTab('{url}');";

        _ = JSRuntime.InvokeVoidAsync("eval", script);
    }
}
