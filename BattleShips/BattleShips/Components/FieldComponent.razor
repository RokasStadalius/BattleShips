@using BattleShips.Models;
@using BattleShips.Models.Handlers;
@using BattleShips.Services
@inject RoomService RoomService
@inject Blazored.Toast.Services.IToastService ToastService
@using Microsoft.AspNetCore.SignalR.Client

<h1>@FieldModel.Name</h1>
<div class="field-container">
    <div class="row">
        <div class="cell header-cell"></div>
        @for (int col = 0; col < FieldModel.Columns; col++)
        {
            <div class="cell header-cell">
                @((char)('A' + col))
            </div>
        }
    </div>

    @for (int row = 0; row < FieldModel.MapLayout.Length; row++)
    {
        <div class="row">
            <div class="cell header-cell">
                @(row + 1)
            </div>

            @for (int col = 0; col < FieldModel.MapLayout[row].Length; col++)
            {
                FieldCell innerCell = FieldModel.MapLayout[row][col];
                <div class="cell">
                    <button class="cell-button" style="background-color:@(innerCell.GetCellColorState(ShowFieldShips));"
                    @onmouseover="@(e => OnMouseOver(innerCell))"
                    @onmouseout="OnMouseOut"
                    @onclick="@(e => CellClicked(innerCell))">
                    </button>
                </div>
            }
        </div>
    }
    <div class="ship-list">
        @foreach (var ship in Ships)
        {
            <button @onclick="() => SelectShip(ship)">
                Select @ship.ShipName
            </button>
        }
    </div>
</div>

@code {
    [Parameter]
    public Field FieldModel { get; set; }
    [Parameter]
    public bool ShowFieldShips { get; set; }
    [Parameter]
    public bool Enabled { get; set; } = true;
    [Parameter]
    public string RoomID { get; set; }
    [Parameter]
    public List<Ship> Ships { get; set; }
    private FieldCell? hoveredCell;
    private Ship? selectedShip;


    public void CellClicked(FieldCell cell)
    {
        var shipSelectionHandler = new ShipSelectionHandler();
        var turnHandler = new TurnHandler();
        var cellAlreadyShotHandler = new CellAlreadyShotHandler();
        var fireAtCellHandler = new FireAtCellHandler();

       
        shipSelectionHandler.SetNext(turnHandler);
        turnHandler.SetNext(cellAlreadyShotHandler);
        cellAlreadyShotHandler.SetNext(fireAtCellHandler);


        shipSelectionHandler.Handle(cell, FieldModel, RoomService, ToastService, Enabled, selectedShip, RoomID);
    }

    private void OnMouseOver(FieldCell cell)
    {
        hoveredCell = cell;
    }

    private void OnMouseOut()
    {
        hoveredCell = null;
    }

    public void SelectShip(Ship ship)
    {
        selectedShip = ship;
        ToastService.ShowInfo($"Selected {ship.ShipName}");
        StateHasChanged();
    }
}
