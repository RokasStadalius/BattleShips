@using BattleShips.Models
@using BattleShips.Models.Handlers
@using BattleShips.Models.Interpretor
@using BattleShips.Services
@inject RoomService RoomService
@inject Blazored.Toast.Services.IToastService ToastService
@using Microsoft.AspNetCore.SignalR.Client

<h1>@FieldModel.Name</h1>

<div class="field-container">
    <div class="row">
        <div class="cell header-cell"></div>
        @for (int col = 0; col < FieldModel.Columns; col++)
        {
            <div class="cell header-cell">
                @((char)('A' + col))
            </div>
        }
    </div>

    @for (int row = 0; row < FieldModel.MapLayout.Length; row++)
    {
        <div class="row">
            <div class="cell header-cell">
                @(row + 1)
            </div>

            @for (int col = 0; col < FieldModel.MapLayout[row].Length; col++)
            {
                FieldCell innerCell = FieldModel.MapLayout[row][col];
                <div class="cell">
                    <button class="cell-button" style="background-color:@(innerCell.GetCellColorState(ShowFieldShips));"
                            @onmouseover="@(e => OnMouseOver(innerCell))"
                            @onmouseout="OnMouseOut"
                            @onclick="@(e => CellClicked(innerCell))">
                    </button>
                </div>
            }
        </div>
    }
</div>

<div class="ship-list">
    @foreach (var ship in Ships)
    {
        <button @onclick="() => SelectShip(ship)">
            Select @ship.ShipName
        </button>
    }
</div>

<!-- Command Line Section -->
<div class="command-line">
    <input type="text" class="command-input" @bind="CommandInput" placeholder="Enter command..." />
    <button class="command-submit" @onclick="ExecuteCommand">Execute</button>
</div>

@code {
    [Parameter]
    public Field FieldModel { get; set; }
    [Parameter]
    public bool ShowFieldShips { get; set; }
    [Parameter]
    public bool Enabled { get; set; } = true;
    [Parameter]
    public string RoomID { get; set; }
    [Parameter]
    public List<Ship> Ships { get; set; }
    private FieldCell? hoveredCell;
    private Ship? selectedShip;
    private string CommandInput { get; set; } = string.Empty;

    private readonly CommandInterpreter commandInterpreter = new();

    public void CellClicked(FieldCell cell)
    {
        var expression = new CellClickExpression("click");
        commandInterpreter.AddCommand(expression);

        commandInterpreter.Interpret(FieldModel, cell, selectedShip, RoomService, ToastService, Enabled, RoomID);
    }

    private void OnMouseOver(FieldCell cell)
    {
        hoveredCell = cell;
    }

    private void OnMouseOut()
    {
        hoveredCell = null;
    }

    public void SelectShip(Ship ship)
    {
        selectedShip = ship;
        ToastService.ShowInfo($"Selected {ship.ShipName}");
        StateHasChanged();
    }

    public void ExecuteCommand()
    {
        if (string.IsNullOrWhiteSpace(CommandInput))
        {
            ToastService.ShowError("Command cannot be empty.");
            return;
        }

        // Parse the command input
        var commandParts = CommandInput.Split(' ');
        var command = commandParts[0].ToLower();

        switch (command)
        {
            case "click":
                if (commandParts.Length == 2)
                {
                    var position = commandParts[1];
                    if (FieldModel.TryParsePosition(position, out var cell))
                    {
                        var expression = new CellClickExpression(position);
                        commandInterpreter.AddCommand(expression);
                        commandInterpreter.Interpret(FieldModel, cell, selectedShip, RoomService, ToastService, Enabled, RoomID);
                    }
                    else
                    {
                        ToastService.ShowError($"Invalid position: {position}");
                    }
                }
                else
                {
                    ToastService.ShowError("Usage: click <position>");
                }
                break;

            default:
                ToastService.ShowError("Unknown command.");
                break;
        }

        CommandInput = string.Empty; // Clear the input field
        StateHasChanged();
    }
}
