@using BattleShips.Models;
@inject IJSRuntime JSRuntime
@inject Blazored.Toast.Services.IToastService ToastService

@code {
    private List<Ship> ships = new List<Ship>
    {
        new Ship {ShipID=-1,ShipTypeID=1,MaxPlacementCount=4, ShipName = "Destroyer", Length = 2 },
        new Ship {ShipID=-1,ShipTypeID=2,MaxPlacementCount=2, ShipName = "Submarine", Length = 3 },
        new Ship {ShipID=-1,ShipTypeID=3,MaxPlacementCount=1, ShipName = "Battleship", Length = 4 },
        new Ship {ShipID=-1,ShipTypeID=4,MaxPlacementCount=1, ShipName = "Carrier", Length = 5 }
    };
}

<div class="ship-container">
    @foreach (var ship in ships)
    {
        var innerShip = ship;
        <p>@innerShip.ShipName, count: @(innerShip.MaxPlacementCount - FieldModel.GetShipCountInMap(innerShip.ShipTypeID))</p>

        <div class="ship" draggable="true" @ondragstart="(e => OnDragStart(e, ship))" style="display: flex; justify-content: center; flex-direction:@(innerShip?.IsVertical == true ? "column" : "row");">
            @for(int i = 0; i < ship.Length; i++)
            {
                <div class="ship-cell" style="width: 25px; height: 25px; background-color: green; margin: 2px;"></div>
            }
        </div>
    }
</div>


<h1 class="field-name-header">@FieldModel.Name</h1>
<div class="field-container">
    <div class="row">
        <div class="cell header-cell"></div>
        @for (int col = 0; col < FieldModel.Columns; col++)
        {
            <div class="cell header-cell">
                @((char)('A' + col))
            </div>
        }
    </div>
    @for (int row = 0; row < FieldModel.Rows; row++)
    {
        <div class="row">
            <div class="cell header-cell">
                @(row + 1)
            </div>
            @for (int col = 0; col < FieldModel.Columns; col++)
            {
                FieldCell innerCell = FieldModel.MapLayout[row][col];

                <div class="cell"
                    @ondragover:preventDefault="true"
                    @ondragover="@(e => OnDragOver(innerCell))"
                    @ondrop="@(e => OnDrop(innerCell))">
                    <button class="cell-button" style="background-color:@(innerCell.GetCellColorState(true));">
                        
                    </button>
                </div>
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public Field FieldModel { get; set; }
    private Ship draggedShip;
    private FieldCell hoveredCell;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Register JS key listener for 'R' key
            await JSRuntime.InvokeVoidAsync("listenForKeyPress", DotNetObjectReference.Create(this));
        }
    }

    private void OnDragStart(DragEventArgs e, Ship ship)
    {
        draggedShip = ship;
        e.DataTransfer.EffectAllowed = "move";
    }

    private void OnDragOver(FieldCell cell)
    {
        hoveredCell = cell;
    }

    private void OnDrop(FieldCell cell)
    {
        if (draggedShip != null)
        {
            if (FieldModel.CanPlaceShip(draggedShip, cell))
            {
                if (FieldModel.GetShipCountInMap(draggedShip.ShipTypeID) < draggedShip.MaxPlacementCount)
                    FieldModel.PlaceShipOnMap(draggedShip, cell);
                else
                    ToastService.ShowError("Ship count limit is reached!");
            }
            else
                ToastService.ShowWarning("Ship cannot be placed here!");

            draggedShip = null;
            hoveredCell = null;
        }
    }

    [JSInvokable]
    public void RotateShip()
    {
        foreach(var ship in ships)
        {
            ship.IsVertical = !ship.IsVertical;
        }
        StateHasChanged();
    }
}
